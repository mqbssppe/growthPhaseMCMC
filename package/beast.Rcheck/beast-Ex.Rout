
R version 3.4.2 (2017-09-28) -- "Short Summer"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "beast"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "beast-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('beast')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("beast-package")
> ### * beast-package
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: beast-package
> ### Title: Bayesian Estimation of Change-Points in the Slope of
> ###   Multivariate Time-Series
> ### Aliases: beast-package beast-package
> ### Keywords: package
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # This example illustrates the package using a subset of four 
> ##D #      time-series of the fungal dataset. 
> ##D library('beast')	# load package
> ##D data("FungalGrowthDataset")	# load dataset
> ##D myIndex <- c(392, 62, 3, 117)	# run the sampler only for the 
> ##D #                                 specific subset of time-series
> ##D set.seed(1)		# optional
> ##D # Run MCMC sampler:
> ##D run_mcmc <- beast(myDataList = FungalGrowthDataset, subsetIndex = myIndex, 
> ##D 			zeroNormalization = TRUE) 
> ##D # Print output:
> ##D print(run_mcmc)
> ##D # Plot output to file: "beast_plot.pdf"
> ##D plot(run_mcmc, fileName = "beast_plot.pdf", timeScale=1/6, xlab = "hours", ylab = "growth")
> ##D # NOTE 1: for a complete analysis remove the `subsetIndex = myIndex` argument.
> ##D # NOTE 2: `zeroNormalization = TRUE` is an optional argument that forces all 
> ##D #	   time-series to start from zero. It is not supposed to be used 
> ##D #	   for other applications.
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("beast-package", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("beast")
> ### * beast
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: beast
> ### Title: Main function
> ### Aliases: beast
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # This example illustrates the package using a subset of four 
> ##D #      time-series of the fungal dataset. 
> ##D library('beast')	# load package
> ##D data("FungalGrowthDataset")	# load dataset
> ##D myIndex <- c(392, 62, 3, 117)	# run the sampler only for the 
> ##D #                                 specific subset of time-series
> ##D set.seed(1)		# optional
> ##D # Run MCMC sampler:
> ##D run_mcmc <- beast(myDataList = FungalGrowthDataset, subsetIndex = myIndex, 
> ##D 			zeroNormalization = TRUE) 
> ##D # Print output:
> ##D print(run_mcmc)
> ##D # Plot output to file: "beast_plot.pdf"
> ##D plot(run_mcmc, fileName = "beast_plot.pdf", timeScale=1/6, xlab = "hours", ylab = "growth")
> ##D # NOTE 1: for a complete analysis remove the `subsetIndex = myIndex` argument.
> ##D # NOTE 2: `zeroNormalization = TRUE` is an optional argument that forces all 
> ##D #	   time-series to start from zero. It is not supposed to be used 
> ##D #	   for other applications.
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("beast", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.112 0.004 0.116 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
